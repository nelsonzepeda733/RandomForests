# Predecir Perdida de Clientes con Arbol de Decision
 
 
# PASO 1:   Carga Package y Set de datos
# ---------------------------------------------------------------------------
library(C50)
library(rpart)
library(rpart.plot) 
data(churn); # carga tablas
 
Variables      <-c(4,7,16,19,17,20)               # variables elegidas
Entrenamiento  <-churnTrain[,Variables]           # tabla entrenamiento
Test           <-churnTest [,Variables]           # tabla  Test
 
 
# PASO 2:   Crea Arbol de Decision
# ---------------------------------------------------------------------------
ModeloArbol<-rpart(churn ~ .,data=Entrenamiento,parms=list(split="information"))
 
 
# PASO 3:  Predice Desafiliación en datos de TEST
# ---------------------------------------------------------------------------
Prediccion <- predict(ModeloArbol, Test,type="class") # Prediccción en Test
MC         <- table(Test[, "churn"],Prediccion) # Matriz de Confusión
 
 
# PASO 4: Crea Grafico
# ---------------------------------------------------------------------------
rpart.plot(ModeloArbol, type=1, extra=100,cex = .7, box.col=c("gray99", "gray88")[ModeloArbol$frame$yval])
		   
str(Test)

Test$churn_pred<-Prediccion		   

library("pROC")

roc_obj <- roc(as.numeric(Test$churn), as.numeric(Test$churn_pred))

plot(roc_obj,col = "blue")
auc(roc_obj)






##############RF ###############

library("randomForest")

Variables      <-c(4,7,16,19,17,20)               # variables elegidas
Entrenamiento  <-churnTrain[,Variables]           # tabla entrenamiento
Test           <-churnTest [,Variables]           # tabla  Test
 
 
# PASO 2:   Crea Arbol de Decision
# ---------------------------------------------------------------------------
ModeloRF<-randomForest(churn ~ .,data=Entrenamiento, importance = TRUE)
PrediccionRF <- predict(ModeloRF, Test,type="class") # Prediccción en Test

Test$churn_pred_rf<-PrediccionRF	
MCRF         <- table(Test[, "churn"],PrediccionRF) # Matriz de Confusión

roc_obj_rf <- roc(as.numeric(Test$churn), as.numeric(Test$churn_pred_rf))

plot(roc_obj_rf,col = "blue")
auc(roc_obj_rf)
importance(ModeloRF)


##Analizando los HiperPArametros el RF


tuning_rf_mtry <- function(df, y, ntree = 500){
  # Esta función devuelve el out-of-bag-MSE de un modelo RandomForest en función
  # del número de predictores evaluados (mtry)
  
  # Argumentos:
  #   df = data frame con los predictores y variable respuesta
  #   y  = nombre de la variable respuesta
  #   ntree = número de árboles creados en el modelo randomForest

  require(dplyr)
  max_predictores <- ncol(df) - 1
  n_predictores   <- rep(NA, max_predictores)
  oob_mse         <- rep(NA, max_predictores)
  for (i in 2:max_predictores) {
    set.seed(123)
    f <- formula(paste(y,"~ ."))
    modelo_rf <- randomForest(formula = f, data = df, mtry = i, ntree = ntree)
    n_predictores[i] <- i
    oob_mse[i] <- tail(modelo_rf$err.rate, n = 1)
  }
  results <- data_frame(n_predictores, oob_mse)
  return(results)
}

hiperparametro_mtry <-  tuning_rf_mtry(df = Entrenamiento, y = "churn")
hiperparametro_mtry %>% arrange(oob_mse)

library("ggplot2")
ggplot(data = hiperparametro_mtry, aes(x = n_predictores, y = oob_mse)) +
  scale_x_continuous(breaks = hiperparametro_mtry$n_predictores) +
  geom_line() +
  geom_point() +
  geom_point(data = hiperparametro_mtry %>% arrange(oob_mse) %>% head(1),
             color = "red") +
  labs(title = "Evolución del out-of-bag-error vs mtry",
       x = "nº predictores empleados") +
  theme_bw()
  
  #Para cantidad de Arboles
  
  oob_mse <- data.frame(oob_mse = ModeloRF$err.rate,
                      arboles = seq_along(ModeloRF$err.rate))
					  
oob_mse_sample<-oob_mse[1:500,]
plot(oob_mse_sample$oob_mse.OOB)


#modelo Tuneado

modelo_randomforest <- randomForest(churn ~ ., data = Entrenamiento, mtry = 2 , ntree = 100,importance = TRUE)
modelo_randomforest


PrediccionRFTun <- predict(modelo_randomforest, Test,type="class") # Prediccción en Test

Test$churn_pred_rf_tun<-PrediccionRFTun	
MCRF_TUN         <- table(Test[, "churn"],PrediccionRFTun) # Matriz de Confusión

roc_obj_rf_tun <- roc(as.numeric(Test$churn), as.numeric(Test$churn_pred_rf_tun))

plot(roc_obj_rf_tun,col = "blue")
auc(roc_obj_rf_tun)
importance(modelo_randomforest)

